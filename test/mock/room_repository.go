// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/room_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/sesaquecruz/go-chat-api/internal/domain/entity"
	pagination "github.com/sesaquecruz/go-chat-api/internal/domain/repository/pagination"
	valueobject "github.com/sesaquecruz/go-chat-api/internal/domain/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomRepositoryInterface is a mock of RoomRepositoryInterface interface.
type MockRoomRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryInterfaceMockRecorder
}

// MockRoomRepositoryInterfaceMockRecorder is the mock recorder for MockRoomRepositoryInterface.
type MockRoomRepositoryInterfaceMockRecorder struct {
	mock *MockRoomRepositoryInterface
}

// NewMockRoomRepositoryInterface creates a new mock instance.
func NewMockRoomRepositoryInterface(ctrl *gomock.Controller) *MockRoomRepositoryInterface {
	mock := &MockRoomRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepositoryInterface) EXPECT() *MockRoomRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRoomRepositoryInterface) Delete(ctx context.Context, id *valueobject.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomRepositoryInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomRepositoryInterface)(nil).Delete), ctx, id)
}

// FindById mocks base method.
func (m *MockRoomRepositoryInterface) FindById(ctx context.Context, id *valueobject.Id) (*entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRoomRepositoryInterfaceMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRoomRepositoryInterface)(nil).FindById), ctx, id)
}

// Save mocks base method.
func (m *MockRoomRepositoryInterface) Save(ctx context.Context, room *entity.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRoomRepositoryInterfaceMockRecorder) Save(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRoomRepositoryInterface)(nil).Save), ctx, room)
}

// Search mocks base method.
func (m *MockRoomRepositoryInterface) Search(ctx context.Context, query *pagination.Query) (*pagination.Page[*entity.Room], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].(*pagination.Page[*entity.Room])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRoomRepositoryInterfaceMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRoomRepositoryInterface)(nil).Search), ctx, query)
}

// Update mocks base method.
func (m *MockRoomRepositoryInterface) Update(ctx context.Context, room *entity.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoomRepositoryInterfaceMockRecorder) Update(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoomRepositoryInterface)(nil).Update), ctx, room)
}
