// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/gateway/message_receiver_gateway.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageReceiverGateway is a mock of MessageReceiverGateway interface.
type MockMessageReceiverGateway struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReceiverGatewayMockRecorder
}

// MockMessageReceiverGatewayMockRecorder is the mock recorder for MockMessageReceiverGateway.
type MockMessageReceiverGatewayMockRecorder struct {
	mock *MockMessageReceiverGateway
}

// NewMockMessageReceiverGateway creates a new mock instance.
func NewMockMessageReceiverGateway(ctrl *gomock.Controller) *MockMessageReceiverGateway {
	mock := &MockMessageReceiverGateway{ctrl: ctrl}
	mock.recorder = &MockMessageReceiverGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageReceiverGateway) EXPECT() *MockMessageReceiverGatewayMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockMessageReceiverGateway) Receive() (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockMessageReceiverGatewayMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockMessageReceiverGateway)(nil).Receive))
}
