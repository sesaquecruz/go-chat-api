// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/gateway/message_sender_gateway.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/sesaquecruz/go-chat-api/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageSenderGatewayInterface is a mock of MessageSenderGatewayInterface interface.
type MockMessageSenderGatewayInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderGatewayInterfaceMockRecorder
}

// MockMessageSenderGatewayInterfaceMockRecorder is the mock recorder for MockMessageSenderGatewayInterface.
type MockMessageSenderGatewayInterfaceMockRecorder struct {
	mock *MockMessageSenderGatewayInterface
}

// NewMockMessageSenderGatewayInterface creates a new mock instance.
func NewMockMessageSenderGatewayInterface(ctrl *gomock.Controller) *MockMessageSenderGatewayInterface {
	mock := &MockMessageSenderGatewayInterface{ctrl: ctrl}
	mock.recorder = &MockMessageSenderGatewayInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSenderGatewayInterface) EXPECT() *MockMessageSenderGatewayInterfaceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageSenderGatewayInterface) Send(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMessageSenderGatewayInterfaceMockRecorder) Send(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageSenderGatewayInterface)(nil).Send), ctx, message)
}
