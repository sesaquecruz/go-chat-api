// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sesaquecruz/go-chat-api/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	pagination "github.com/sesaquecruz/go-chat-api/internal/domain/pagination"

	valueobject "github.com/sesaquecruz/go-chat-api/internal/domain/valueobject"
)

// RoomRepositoryMock is an autogenerated mock type for the RoomRepository type
type RoomRepositoryMock struct {
	mock.Mock
}

type RoomRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RoomRepositoryMock) EXPECT() *RoomRepositoryMock_Expecter {
	return &RoomRepositoryMock_Expecter{mock: &_m.Mock}
}

// FindById provides a mock function with given fields: ctx, id
func (_m *RoomRepositoryMock) FindById(ctx context.Context, id *valueobject.Id) (*entity.Room, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *valueobject.Id) (*entity.Room, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *valueobject.Id) *entity.Room); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *valueobject.Id) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomRepositoryMock_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type RoomRepositoryMock_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - id *valueobject.Id
func (_e *RoomRepositoryMock_Expecter) FindById(ctx interface{}, id interface{}) *RoomRepositoryMock_FindById_Call {
	return &RoomRepositoryMock_FindById_Call{Call: _e.mock.On("FindById", ctx, id)}
}

func (_c *RoomRepositoryMock_FindById_Call) Run(run func(ctx context.Context, id *valueobject.Id)) *RoomRepositoryMock_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*valueobject.Id))
	})
	return _c
}

func (_c *RoomRepositoryMock_FindById_Call) Return(_a0 *entity.Room, _a1 error) *RoomRepositoryMock_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomRepositoryMock_FindById_Call) RunAndReturn(run func(context.Context, *valueobject.Id) (*entity.Room, error)) *RoomRepositoryMock_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, room
func (_m *RoomRepositoryMock) Save(ctx context.Context, room *entity.Room) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Room) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoomRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RoomRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - room *entity.Room
func (_e *RoomRepositoryMock_Expecter) Save(ctx interface{}, room interface{}) *RoomRepositoryMock_Save_Call {
	return &RoomRepositoryMock_Save_Call{Call: _e.mock.On("Save", ctx, room)}
}

func (_c *RoomRepositoryMock_Save_Call) Run(run func(ctx context.Context, room *entity.Room)) *RoomRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Room))
	})
	return _c
}

func (_c *RoomRepositoryMock_Save_Call) Return(_a0 error) *RoomRepositoryMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoomRepositoryMock_Save_Call) RunAndReturn(run func(context.Context, *entity.Room) error) *RoomRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query
func (_m *RoomRepositoryMock) Search(ctx context.Context, query *pagination.Query) (*pagination.Page[*entity.Room], error) {
	ret := _m.Called(ctx, query)

	var r0 *pagination.Page[*entity.Room]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Query) (*pagination.Page[*entity.Room], error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Query) *pagination.Page[*entity.Room]); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.Page[*entity.Room])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomRepositoryMock_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type RoomRepositoryMock_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query *pagination.Query
func (_e *RoomRepositoryMock_Expecter) Search(ctx interface{}, query interface{}) *RoomRepositoryMock_Search_Call {
	return &RoomRepositoryMock_Search_Call{Call: _e.mock.On("Search", ctx, query)}
}

func (_c *RoomRepositoryMock_Search_Call) Run(run func(ctx context.Context, query *pagination.Query)) *RoomRepositoryMock_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pagination.Query))
	})
	return _c
}

func (_c *RoomRepositoryMock_Search_Call) Return(_a0 *pagination.Page[*entity.Room], _a1 error) *RoomRepositoryMock_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomRepositoryMock_Search_Call) RunAndReturn(run func(context.Context, *pagination.Query) (*pagination.Page[*entity.Room], error)) *RoomRepositoryMock_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, room
func (_m *RoomRepositoryMock) Update(ctx context.Context, room *entity.Room) error {
	ret := _m.Called(ctx, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Room) error); ok {
		r0 = rf(ctx, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoomRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RoomRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - room *entity.Room
func (_e *RoomRepositoryMock_Expecter) Update(ctx interface{}, room interface{}) *RoomRepositoryMock_Update_Call {
	return &RoomRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, room)}
}

func (_c *RoomRepositoryMock_Update_Call) Run(run func(ctx context.Context, room *entity.Room)) *RoomRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Room))
	})
	return _c
}

func (_c *RoomRepositoryMock_Update_Call) Return(_a0 error) *RoomRepositoryMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoomRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, *entity.Room) error) *RoomRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoomRepositoryMock creates a new instance of RoomRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomRepositoryMock {
	mock := &RoomRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
