// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sesaquecruz/go-chat-api/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	valueobject "github.com/sesaquecruz/go-chat-api/internal/domain/valueobject"
)

// MessageRepositoryMock is an autogenerated mock type for the MessageRepository type
type MessageRepositoryMock struct {
	mock.Mock
}

type MessageRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepositoryMock) EXPECT() *MessageRepositoryMock_Expecter {
	return &MessageRepositoryMock_Expecter{mock: &_m.Mock}
}

// FindById provides a mock function with given fields: ctx, id
func (_m *MessageRepositoryMock) FindById(ctx context.Context, id *valueobject.Id) (*entity.Message, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *valueobject.Id) (*entity.Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *valueobject.Id) *entity.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *valueobject.Id) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepositoryMock_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MessageRepositoryMock_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - id *valueobject.Id
func (_e *MessageRepositoryMock_Expecter) FindById(ctx interface{}, id interface{}) *MessageRepositoryMock_FindById_Call {
	return &MessageRepositoryMock_FindById_Call{Call: _e.mock.On("FindById", ctx, id)}
}

func (_c *MessageRepositoryMock_FindById_Call) Run(run func(ctx context.Context, id *valueobject.Id)) *MessageRepositoryMock_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*valueobject.Id))
	})
	return _c
}

func (_c *MessageRepositoryMock_FindById_Call) Return(_a0 *entity.Message, _a1 error) *MessageRepositoryMock_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageRepositoryMock_FindById_Call) RunAndReturn(run func(context.Context, *valueobject.Id) (*entity.Message, error)) *MessageRepositoryMock_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, message
func (_m *MessageRepositoryMock) Save(ctx context.Context, message *entity.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MessageRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - message *entity.Message
func (_e *MessageRepositoryMock_Expecter) Save(ctx interface{}, message interface{}) *MessageRepositoryMock_Save_Call {
	return &MessageRepositoryMock_Save_Call{Call: _e.mock.On("Save", ctx, message)}
}

func (_c *MessageRepositoryMock_Save_Call) Run(run func(ctx context.Context, message *entity.Message)) *MessageRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Message))
	})
	return _c
}

func (_c *MessageRepositoryMock_Save_Call) Return(_a0 error) *MessageRepositoryMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepositoryMock_Save_Call) RunAndReturn(run func(context.Context, *entity.Message) error) *MessageRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageRepositoryMock creates a new instance of MessageRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepositoryMock {
	mock := &MessageRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
