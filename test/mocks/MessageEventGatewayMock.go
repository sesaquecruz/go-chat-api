// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/sesaquecruz/go-chat-api/internal/domain/event"

	mock "github.com/stretchr/testify/mock"
)

// MessageEventGatewayMock is an autogenerated mock type for the MessageEventGateway type
type MessageEventGatewayMock struct {
	mock.Mock
}

type MessageEventGatewayMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageEventGatewayMock) EXPECT() *MessageEventGatewayMock_Expecter {
	return &MessageEventGatewayMock_Expecter{mock: &_m.Mock}
}

// Receive provides a mock function with given fields: ctx, messageEvents
func (_m *MessageEventGatewayMock) Receive(ctx context.Context, messageEvents chan<- *event.MessageEvent) error {
	ret := _m.Called(ctx, messageEvents)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *event.MessageEvent) error); ok {
		r0 = rf(ctx, messageEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageEventGatewayMock_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type MessageEventGatewayMock_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - ctx context.Context
//   - messageEvents chan<- *event.MessageEvent
func (_e *MessageEventGatewayMock_Expecter) Receive(ctx interface{}, messageEvents interface{}) *MessageEventGatewayMock_Receive_Call {
	return &MessageEventGatewayMock_Receive_Call{Call: _e.mock.On("Receive", ctx, messageEvents)}
}

func (_c *MessageEventGatewayMock_Receive_Call) Run(run func(ctx context.Context, messageEvents chan<- *event.MessageEvent)) *MessageEventGatewayMock_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- *event.MessageEvent))
	})
	return _c
}

func (_c *MessageEventGatewayMock_Receive_Call) Return(_a0 error) *MessageEventGatewayMock_Receive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageEventGatewayMock_Receive_Call) RunAndReturn(run func(context.Context, chan<- *event.MessageEvent) error) *MessageEventGatewayMock_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, messageEvent
func (_m *MessageEventGatewayMock) Send(ctx context.Context, messageEvent *event.MessageEvent) error {
	ret := _m.Called(ctx, messageEvent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.MessageEvent) error); ok {
		r0 = rf(ctx, messageEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageEventGatewayMock_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MessageEventGatewayMock_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - messageEvent *event.MessageEvent
func (_e *MessageEventGatewayMock_Expecter) Send(ctx interface{}, messageEvent interface{}) *MessageEventGatewayMock_Send_Call {
	return &MessageEventGatewayMock_Send_Call{Call: _e.mock.On("Send", ctx, messageEvent)}
}

func (_c *MessageEventGatewayMock_Send_Call) Run(run func(ctx context.Context, messageEvent *event.MessageEvent)) *MessageEventGatewayMock_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*event.MessageEvent))
	})
	return _c
}

func (_c *MessageEventGatewayMock_Send_Call) Return(_a0 error) *MessageEventGatewayMock_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageEventGatewayMock_Send_Call) RunAndReturn(run func(context.Context, *event.MessageEvent) error) *MessageEventGatewayMock_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageEventGatewayMock creates a new instance of MessageEventGatewayMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageEventGatewayMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageEventGatewayMock {
	mock := &MessageEventGatewayMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
